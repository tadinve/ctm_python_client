# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.20.215
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ctm_python_client.ctm_api_client.configuration import Configuration


class DeploymentFileResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_file': 'str',
        'successful_folders_count': 'int',
        'successful_smart_folders_count': 'int',
        'successful_sub_folders_count': 'int',
        'successful_jobs_count': 'int',
        'successful_connection_profiles_count': 'int',
        'successful_drivers_count': 'int',
        'successful_calendars_count': 'int',
        'is_deploy_descriptor_valid': 'bool',
        'deployed_folders': 'list[str]',
        'deployed_jobs': 'list[str]',
        'deployed_drivers': 'list[str]',
        'deployed_connection_profiles': 'list[str]',
        'deployed_calendars': 'list[str]',
        'errors': 'list[DeploymentFileError]',
        'warnings': 'list[WarningData]'
    }

    attribute_map = {
        'deployment_file': 'deploymentFile',
        'successful_folders_count': 'successfulFoldersCount',
        'successful_smart_folders_count': 'successfulSmartFoldersCount',
        'successful_sub_folders_count': 'successfulSubFoldersCount',
        'successful_jobs_count': 'successfulJobsCount',
        'successful_connection_profiles_count': 'successfulConnectionProfilesCount',
        'successful_drivers_count': 'successfulDriversCount',
        'successful_calendars_count': 'successfulCalendarsCount',
        'is_deploy_descriptor_valid': 'isDeployDescriptorValid',
        'deployed_folders': 'deployedFolders',
        'deployed_jobs': 'deployedJobs',
        'deployed_drivers': 'deployedDrivers',
        'deployed_connection_profiles': 'deployedConnectionProfiles',
        'deployed_calendars': 'deployedCalendars',
        'errors': 'errors',
        'warnings': 'warnings'
    }

    def __init__(self, deployment_file=None, successful_folders_count=None, successful_smart_folders_count=None, successful_sub_folders_count=None, successful_jobs_count=None, successful_connection_profiles_count=None, successful_drivers_count=None, successful_calendars_count=None, is_deploy_descriptor_valid=None, deployed_folders=None, deployed_jobs=None, deployed_drivers=None, deployed_connection_profiles=None, deployed_calendars=None, errors=None, warnings=None, _configuration=None):  # noqa: E501
        """DeploymentFileResults - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deployment_file = None
        self._successful_folders_count = None
        self._successful_smart_folders_count = None
        self._successful_sub_folders_count = None
        self._successful_jobs_count = None
        self._successful_connection_profiles_count = None
        self._successful_drivers_count = None
        self._successful_calendars_count = None
        self._is_deploy_descriptor_valid = None
        self._deployed_folders = None
        self._deployed_jobs = None
        self._deployed_drivers = None
        self._deployed_connection_profiles = None
        self._deployed_calendars = None
        self._errors = None
        self._warnings = None
        self.discriminator = None

        if deployment_file is not None:
            self.deployment_file = deployment_file
        if successful_folders_count is not None:
            self.successful_folders_count = successful_folders_count
        if successful_smart_folders_count is not None:
            self.successful_smart_folders_count = successful_smart_folders_count
        if successful_sub_folders_count is not None:
            self.successful_sub_folders_count = successful_sub_folders_count
        if successful_jobs_count is not None:
            self.successful_jobs_count = successful_jobs_count
        if successful_connection_profiles_count is not None:
            self.successful_connection_profiles_count = successful_connection_profiles_count
        if successful_drivers_count is not None:
            self.successful_drivers_count = successful_drivers_count
        if successful_calendars_count is not None:
            self.successful_calendars_count = successful_calendars_count
        if is_deploy_descriptor_valid is not None:
            self.is_deploy_descriptor_valid = is_deploy_descriptor_valid
        if deployed_folders is not None:
            self.deployed_folders = deployed_folders
        if deployed_jobs is not None:
            self.deployed_jobs = deployed_jobs
        if deployed_drivers is not None:
            self.deployed_drivers = deployed_drivers
        if deployed_connection_profiles is not None:
            self.deployed_connection_profiles = deployed_connection_profiles
        if deployed_calendars is not None:
            self.deployed_calendars = deployed_calendars
        if errors is not None:
            self.errors = errors
        if warnings is not None:
            self.warnings = warnings

    @property
    def deployment_file(self):
        """Gets the deployment_file of this DeploymentFileResults.  # noqa: E501

        The name of a specific deployment file.  # noqa: E501

        :return: The deployment_file of this DeploymentFileResults.  # noqa: E501
        :rtype: str
        """
        return self._deployment_file

    @deployment_file.setter
    def deployment_file(self, deployment_file):
        """Sets the deployment_file of this DeploymentFileResults.

        The name of a specific deployment file.  # noqa: E501

        :param deployment_file: The deployment_file of this DeploymentFileResults.  # noqa: E501
        :type: str
        """

        self._deployment_file = deployment_file

    @property
    def successful_folders_count(self):
        """Gets the successful_folders_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed simple folders.  # noqa: E501

        :return: The successful_folders_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_folders_count

    @successful_folders_count.setter
    def successful_folders_count(self, successful_folders_count):
        """Sets the successful_folders_count of this DeploymentFileResults.

        Determines the number of successfully deployed simple folders.  # noqa: E501

        :param successful_folders_count: The successful_folders_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_folders_count = successful_folders_count

    @property
    def successful_smart_folders_count(self):
        """Gets the successful_smart_folders_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed smart folders.  # noqa: E501

        :return: The successful_smart_folders_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_smart_folders_count

    @successful_smart_folders_count.setter
    def successful_smart_folders_count(self, successful_smart_folders_count):
        """Sets the successful_smart_folders_count of this DeploymentFileResults.

        Determines the number of successfully deployed smart folders.  # noqa: E501

        :param successful_smart_folders_count: The successful_smart_folders_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_smart_folders_count = successful_smart_folders_count

    @property
    def successful_sub_folders_count(self):
        """Gets the successful_sub_folders_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :return: The successful_sub_folders_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_sub_folders_count

    @successful_sub_folders_count.setter
    def successful_sub_folders_count(self, successful_sub_folders_count):
        """Sets the successful_sub_folders_count of this DeploymentFileResults.

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :param successful_sub_folders_count: The successful_sub_folders_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_sub_folders_count = successful_sub_folders_count

    @property
    def successful_jobs_count(self):
        """Gets the successful_jobs_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :return: The successful_jobs_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_jobs_count

    @successful_jobs_count.setter
    def successful_jobs_count(self, successful_jobs_count):
        """Sets the successful_jobs_count of this DeploymentFileResults.

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :param successful_jobs_count: The successful_jobs_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_jobs_count = successful_jobs_count

    @property
    def successful_connection_profiles_count(self):
        """Gets the successful_connection_profiles_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :return: The successful_connection_profiles_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_connection_profiles_count

    @successful_connection_profiles_count.setter
    def successful_connection_profiles_count(self, successful_connection_profiles_count):
        """Sets the successful_connection_profiles_count of this DeploymentFileResults.

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :param successful_connection_profiles_count: The successful_connection_profiles_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_connection_profiles_count = successful_connection_profiles_count

    @property
    def successful_drivers_count(self):
        """Gets the successful_drivers_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :return: The successful_drivers_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_drivers_count

    @successful_drivers_count.setter
    def successful_drivers_count(self, successful_drivers_count):
        """Sets the successful_drivers_count of this DeploymentFileResults.

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :param successful_drivers_count: The successful_drivers_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_drivers_count = successful_drivers_count

    @property
    def successful_calendars_count(self):
        """Gets the successful_calendars_count of this DeploymentFileResults.  # noqa: E501

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :return: The successful_calendars_count of this DeploymentFileResults.  # noqa: E501
        :rtype: int
        """
        return self._successful_calendars_count

    @successful_calendars_count.setter
    def successful_calendars_count(self, successful_calendars_count):
        """Sets the successful_calendars_count of this DeploymentFileResults.

        Determines the number of successfully deployed sub folders.  # noqa: E501

        :param successful_calendars_count: The successful_calendars_count of this DeploymentFileResults.  # noqa: E501
        :type: int
        """

        self._successful_calendars_count = successful_calendars_count

    @property
    def is_deploy_descriptor_valid(self):
        """Gets the is_deploy_descriptor_valid of this DeploymentFileResults.  # noqa: E501

        Determines if the deployment file is a valid deploy descriptor file.  # noqa: E501

        :return: The is_deploy_descriptor_valid of this DeploymentFileResults.  # noqa: E501
        :rtype: bool
        """
        return self._is_deploy_descriptor_valid

    @is_deploy_descriptor_valid.setter
    def is_deploy_descriptor_valid(self, is_deploy_descriptor_valid):
        """Sets the is_deploy_descriptor_valid of this DeploymentFileResults.

        Determines if the deployment file is a valid deploy descriptor file.  # noqa: E501

        :param is_deploy_descriptor_valid: The is_deploy_descriptor_valid of this DeploymentFileResults.  # noqa: E501
        :type: bool
        """

        self._is_deploy_descriptor_valid = is_deploy_descriptor_valid

    @property
    def deployed_folders(self):
        """Gets the deployed_folders of this DeploymentFileResults.  # noqa: E501


        :return: The deployed_folders of this DeploymentFileResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._deployed_folders

    @deployed_folders.setter
    def deployed_folders(self, deployed_folders):
        """Sets the deployed_folders of this DeploymentFileResults.


        :param deployed_folders: The deployed_folders of this DeploymentFileResults.  # noqa: E501
        :type: list[str]
        """

        self._deployed_folders = deployed_folders

    @property
    def deployed_jobs(self):
        """Gets the deployed_jobs of this DeploymentFileResults.  # noqa: E501


        :return: The deployed_jobs of this DeploymentFileResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._deployed_jobs

    @deployed_jobs.setter
    def deployed_jobs(self, deployed_jobs):
        """Sets the deployed_jobs of this DeploymentFileResults.


        :param deployed_jobs: The deployed_jobs of this DeploymentFileResults.  # noqa: E501
        :type: list[str]
        """

        self._deployed_jobs = deployed_jobs

    @property
    def deployed_drivers(self):
        """Gets the deployed_drivers of this DeploymentFileResults.  # noqa: E501


        :return: The deployed_drivers of this DeploymentFileResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._deployed_drivers

    @deployed_drivers.setter
    def deployed_drivers(self, deployed_drivers):
        """Sets the deployed_drivers of this DeploymentFileResults.


        :param deployed_drivers: The deployed_drivers of this DeploymentFileResults.  # noqa: E501
        :type: list[str]
        """

        self._deployed_drivers = deployed_drivers

    @property
    def deployed_connection_profiles(self):
        """Gets the deployed_connection_profiles of this DeploymentFileResults.  # noqa: E501


        :return: The deployed_connection_profiles of this DeploymentFileResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._deployed_connection_profiles

    @deployed_connection_profiles.setter
    def deployed_connection_profiles(self, deployed_connection_profiles):
        """Sets the deployed_connection_profiles of this DeploymentFileResults.


        :param deployed_connection_profiles: The deployed_connection_profiles of this DeploymentFileResults.  # noqa: E501
        :type: list[str]
        """

        self._deployed_connection_profiles = deployed_connection_profiles

    @property
    def deployed_calendars(self):
        """Gets the deployed_calendars of this DeploymentFileResults.  # noqa: E501


        :return: The deployed_calendars of this DeploymentFileResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._deployed_calendars

    @deployed_calendars.setter
    def deployed_calendars(self, deployed_calendars):
        """Sets the deployed_calendars of this DeploymentFileResults.


        :param deployed_calendars: The deployed_calendars of this DeploymentFileResults.  # noqa: E501
        :type: list[str]
        """

        self._deployed_calendars = deployed_calendars

    @property
    def errors(self):
        """Gets the errors of this DeploymentFileResults.  # noqa: E501


        :return: The errors of this DeploymentFileResults.  # noqa: E501
        :rtype: list[DeploymentFileError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DeploymentFileResults.


        :param errors: The errors of this DeploymentFileResults.  # noqa: E501
        :type: list[DeploymentFileError]
        """

        self._errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this DeploymentFileResults.  # noqa: E501


        :return: The warnings of this DeploymentFileResults.  # noqa: E501
        :rtype: list[WarningData]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this DeploymentFileResults.


        :param warnings: The warnings of this DeploymentFileResults.  # noqa: E501
        :type: list[WarningData]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentFileResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentFileResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentFileResults):
            return True

        return self.to_dict() != other.to_dict()
