# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.20.215
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ctm_api_client.configuration import Configuration


class FieldMetadataProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_type': 'str',
        'data_type': 'str',
        'display_name': 'str',
        'display_name_id': 'str',
        'false_value': 'str',
        'hashed_password': 'bool',
        'hide_if': 'ConditionProperties',
        'key': 'SettingKeyProperties',
        'name': 'str',
        'need_restart': 'bool',
        'need_restart_message': 'str',
        'need_restart_message_id': 'str',
        'placeholder': 'str',
        'placeholder_id': 'str',
        'possible_values': 'list[PossibleValueProperties]',
        'profiles': 'list[str]',
        'setting_changed_event_types': 'list[str]',
        'show_if': 'ConditionProperties',
        'tooltip': 'str',
        'tooltip_id': 'str',
        'true_value': 'str',
        'units_label': 'str',
        'units_label_id': 'str',
        'validations': 'ValidationProperties'
    }

    attribute_map = {
        'control_type': 'controlType',
        'data_type': 'dataType',
        'display_name': 'displayName',
        'display_name_id': 'displayNameID',
        'false_value': 'falseValue',
        'hashed_password': 'hashedPassword',
        'hide_if': 'hideIf',
        'key': 'key',
        'name': 'name',
        'need_restart': 'needRestart',
        'need_restart_message': 'needRestartMessage',
        'need_restart_message_id': 'needRestartMessageID',
        'placeholder': 'placeholder',
        'placeholder_id': 'placeholderID',
        'possible_values': 'possibleValues',
        'profiles': 'profiles',
        'setting_changed_event_types': 'settingChangedEventTypes',
        'show_if': 'showIf',
        'tooltip': 'tooltip',
        'tooltip_id': 'tooltipID',
        'true_value': 'trueValue',
        'units_label': 'unitsLabel',
        'units_label_id': 'unitsLabelID',
        'validations': 'validations'
    }

    def __init__(self, control_type=None, data_type=None, display_name=None, display_name_id=None, false_value=None, hashed_password=None, hide_if=None, key=None, name=None, need_restart=None, need_restart_message=None, need_restart_message_id=None, placeholder=None, placeholder_id=None, possible_values=None, profiles=None, setting_changed_event_types=None, show_if=None, tooltip=None, tooltip_id=None, true_value=None, units_label=None, units_label_id=None, validations=None, _configuration=None):  # noqa: E501
        """FieldMetadataProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._control_type = None
        self._data_type = None
        self._display_name = None
        self._display_name_id = None
        self._false_value = None
        self._hashed_password = None
        self._hide_if = None
        self._key = None
        self._name = None
        self._need_restart = None
        self._need_restart_message = None
        self._need_restart_message_id = None
        self._placeholder = None
        self._placeholder_id = None
        self._possible_values = None
        self._profiles = None
        self._setting_changed_event_types = None
        self._show_if = None
        self._tooltip = None
        self._tooltip_id = None
        self._true_value = None
        self._units_label = None
        self._units_label_id = None
        self._validations = None
        self.discriminator = None

        if control_type is not None:
            self.control_type = control_type
        if data_type is not None:
            self.data_type = data_type
        if display_name is not None:
            self.display_name = display_name
        if display_name_id is not None:
            self.display_name_id = display_name_id
        if false_value is not None:
            self.false_value = false_value
        if hashed_password is not None:
            self.hashed_password = hashed_password
        if hide_if is not None:
            self.hide_if = hide_if
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if need_restart is not None:
            self.need_restart = need_restart
        if need_restart_message is not None:
            self.need_restart_message = need_restart_message
        if need_restart_message_id is not None:
            self.need_restart_message_id = need_restart_message_id
        if placeholder is not None:
            self.placeholder = placeholder
        if placeholder_id is not None:
            self.placeholder_id = placeholder_id
        if possible_values is not None:
            self.possible_values = possible_values
        if profiles is not None:
            self.profiles = profiles
        if setting_changed_event_types is not None:
            self.setting_changed_event_types = setting_changed_event_types
        if show_if is not None:
            self.show_if = show_if
        if tooltip is not None:
            self.tooltip = tooltip
        if tooltip_id is not None:
            self.tooltip_id = tooltip_id
        if true_value is not None:
            self.true_value = true_value
        if units_label is not None:
            self.units_label = units_label
        if units_label_id is not None:
            self.units_label_id = units_label_id
        if validations is not None:
            self.validations = validations

    @property
    def control_type(self):
        """Gets the control_type of this FieldMetadataProperties.  # noqa: E501


        :return: The control_type of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._control_type

    @control_type.setter
    def control_type(self, control_type):
        """Sets the control_type of this FieldMetadataProperties.


        :param control_type: The control_type of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._control_type = control_type

    @property
    def data_type(self):
        """Gets the data_type of this FieldMetadataProperties.  # noqa: E501


        :return: The data_type of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this FieldMetadataProperties.


        :param data_type: The data_type of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def display_name(self):
        """Gets the display_name of this FieldMetadataProperties.  # noqa: E501


        :return: The display_name of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FieldMetadataProperties.


        :param display_name: The display_name of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_name_id(self):
        """Gets the display_name_id of this FieldMetadataProperties.  # noqa: E501


        :return: The display_name_id of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._display_name_id

    @display_name_id.setter
    def display_name_id(self, display_name_id):
        """Sets the display_name_id of this FieldMetadataProperties.


        :param display_name_id: The display_name_id of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._display_name_id = display_name_id

    @property
    def false_value(self):
        """Gets the false_value of this FieldMetadataProperties.  # noqa: E501


        :return: The false_value of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._false_value

    @false_value.setter
    def false_value(self, false_value):
        """Sets the false_value of this FieldMetadataProperties.


        :param false_value: The false_value of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._false_value = false_value

    @property
    def hashed_password(self):
        """Gets the hashed_password of this FieldMetadataProperties.  # noqa: E501


        :return: The hashed_password of this FieldMetadataProperties.  # noqa: E501
        :rtype: bool
        """
        return self._hashed_password

    @hashed_password.setter
    def hashed_password(self, hashed_password):
        """Sets the hashed_password of this FieldMetadataProperties.


        :param hashed_password: The hashed_password of this FieldMetadataProperties.  # noqa: E501
        :type: bool
        """

        self._hashed_password = hashed_password

    @property
    def hide_if(self):
        """Gets the hide_if of this FieldMetadataProperties.  # noqa: E501


        :return: The hide_if of this FieldMetadataProperties.  # noqa: E501
        :rtype: ConditionProperties
        """
        return self._hide_if

    @hide_if.setter
    def hide_if(self, hide_if):
        """Sets the hide_if of this FieldMetadataProperties.


        :param hide_if: The hide_if of this FieldMetadataProperties.  # noqa: E501
        :type: ConditionProperties
        """

        self._hide_if = hide_if

    @property
    def key(self):
        """Gets the key of this FieldMetadataProperties.  # noqa: E501


        :return: The key of this FieldMetadataProperties.  # noqa: E501
        :rtype: SettingKeyProperties
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FieldMetadataProperties.


        :param key: The key of this FieldMetadataProperties.  # noqa: E501
        :type: SettingKeyProperties
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this FieldMetadataProperties.  # noqa: E501


        :return: The name of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldMetadataProperties.


        :param name: The name of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def need_restart(self):
        """Gets the need_restart of this FieldMetadataProperties.  # noqa: E501


        :return: The need_restart of this FieldMetadataProperties.  # noqa: E501
        :rtype: bool
        """
        return self._need_restart

    @need_restart.setter
    def need_restart(self, need_restart):
        """Sets the need_restart of this FieldMetadataProperties.


        :param need_restart: The need_restart of this FieldMetadataProperties.  # noqa: E501
        :type: bool
        """

        self._need_restart = need_restart

    @property
    def need_restart_message(self):
        """Gets the need_restart_message of this FieldMetadataProperties.  # noqa: E501


        :return: The need_restart_message of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._need_restart_message

    @need_restart_message.setter
    def need_restart_message(self, need_restart_message):
        """Sets the need_restart_message of this FieldMetadataProperties.


        :param need_restart_message: The need_restart_message of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._need_restart_message = need_restart_message

    @property
    def need_restart_message_id(self):
        """Gets the need_restart_message_id of this FieldMetadataProperties.  # noqa: E501


        :return: The need_restart_message_id of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._need_restart_message_id

    @need_restart_message_id.setter
    def need_restart_message_id(self, need_restart_message_id):
        """Sets the need_restart_message_id of this FieldMetadataProperties.


        :param need_restart_message_id: The need_restart_message_id of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._need_restart_message_id = need_restart_message_id

    @property
    def placeholder(self):
        """Gets the placeholder of this FieldMetadataProperties.  # noqa: E501


        :return: The placeholder of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this FieldMetadataProperties.


        :param placeholder: The placeholder of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    @property
    def placeholder_id(self):
        """Gets the placeholder_id of this FieldMetadataProperties.  # noqa: E501


        :return: The placeholder_id of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._placeholder_id

    @placeholder_id.setter
    def placeholder_id(self, placeholder_id):
        """Sets the placeholder_id of this FieldMetadataProperties.


        :param placeholder_id: The placeholder_id of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._placeholder_id = placeholder_id

    @property
    def possible_values(self):
        """Gets the possible_values of this FieldMetadataProperties.  # noqa: E501


        :return: The possible_values of this FieldMetadataProperties.  # noqa: E501
        :rtype: list[PossibleValueProperties]
        """
        return self._possible_values

    @possible_values.setter
    def possible_values(self, possible_values):
        """Sets the possible_values of this FieldMetadataProperties.


        :param possible_values: The possible_values of this FieldMetadataProperties.  # noqa: E501
        :type: list[PossibleValueProperties]
        """

        self._possible_values = possible_values

    @property
    def profiles(self):
        """Gets the profiles of this FieldMetadataProperties.  # noqa: E501


        :return: The profiles of this FieldMetadataProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this FieldMetadataProperties.


        :param profiles: The profiles of this FieldMetadataProperties.  # noqa: E501
        :type: list[str]
        """

        self._profiles = profiles

    @property
    def setting_changed_event_types(self):
        """Gets the setting_changed_event_types of this FieldMetadataProperties.  # noqa: E501


        :return: The setting_changed_event_types of this FieldMetadataProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._setting_changed_event_types

    @setting_changed_event_types.setter
    def setting_changed_event_types(self, setting_changed_event_types):
        """Sets the setting_changed_event_types of this FieldMetadataProperties.


        :param setting_changed_event_types: The setting_changed_event_types of this FieldMetadataProperties.  # noqa: E501
        :type: list[str]
        """

        self._setting_changed_event_types = setting_changed_event_types

    @property
    def show_if(self):
        """Gets the show_if of this FieldMetadataProperties.  # noqa: E501


        :return: The show_if of this FieldMetadataProperties.  # noqa: E501
        :rtype: ConditionProperties
        """
        return self._show_if

    @show_if.setter
    def show_if(self, show_if):
        """Sets the show_if of this FieldMetadataProperties.


        :param show_if: The show_if of this FieldMetadataProperties.  # noqa: E501
        :type: ConditionProperties
        """

        self._show_if = show_if

    @property
    def tooltip(self):
        """Gets the tooltip of this FieldMetadataProperties.  # noqa: E501


        :return: The tooltip of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this FieldMetadataProperties.


        :param tooltip: The tooltip of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def tooltip_id(self):
        """Gets the tooltip_id of this FieldMetadataProperties.  # noqa: E501


        :return: The tooltip_id of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._tooltip_id

    @tooltip_id.setter
    def tooltip_id(self, tooltip_id):
        """Sets the tooltip_id of this FieldMetadataProperties.


        :param tooltip_id: The tooltip_id of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._tooltip_id = tooltip_id

    @property
    def true_value(self):
        """Gets the true_value of this FieldMetadataProperties.  # noqa: E501


        :return: The true_value of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._true_value

    @true_value.setter
    def true_value(self, true_value):
        """Sets the true_value of this FieldMetadataProperties.


        :param true_value: The true_value of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._true_value = true_value

    @property
    def units_label(self):
        """Gets the units_label of this FieldMetadataProperties.  # noqa: E501


        :return: The units_label of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._units_label

    @units_label.setter
    def units_label(self, units_label):
        """Sets the units_label of this FieldMetadataProperties.


        :param units_label: The units_label of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._units_label = units_label

    @property
    def units_label_id(self):
        """Gets the units_label_id of this FieldMetadataProperties.  # noqa: E501


        :return: The units_label_id of this FieldMetadataProperties.  # noqa: E501
        :rtype: str
        """
        return self._units_label_id

    @units_label_id.setter
    def units_label_id(self, units_label_id):
        """Sets the units_label_id of this FieldMetadataProperties.


        :param units_label_id: The units_label_id of this FieldMetadataProperties.  # noqa: E501
        :type: str
        """

        self._units_label_id = units_label_id

    @property
    def validations(self):
        """Gets the validations of this FieldMetadataProperties.  # noqa: E501


        :return: The validations of this FieldMetadataProperties.  # noqa: E501
        :rtype: ValidationProperties
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this FieldMetadataProperties.


        :param validations: The validations of this FieldMetadataProperties.  # noqa: E501
        :type: ValidationProperties
        """

        self._validations = validations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldMetadataProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldMetadataProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldMetadataProperties):
            return True

        return self.to_dict() != other.to_dict()
