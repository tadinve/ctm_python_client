# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.20.215
    Contact: customer_support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ctm_api_client.configuration import Configuration


class TokenDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_name': 'str',
        'token_type': 'str',
        'token_value': 'str',
        'user': 'str',
        'roles': 'list[str]',
        'expiration_date': 'str',
        'created_date': 'str',
        'last_updated_date': 'str'
    }

    attribute_map = {
        'token_name': 'tokenName',
        'token_type': 'tokenType',
        'token_value': 'tokenValue',
        'user': 'user',
        'roles': 'roles',
        'expiration_date': 'expirationDate',
        'created_date': 'createdDate',
        'last_updated_date': 'lastUpdatedDate'
    }

    def __init__(self, token_name=None, token_type=None, token_value=None, user=None, roles=None, expiration_date=None, created_date=None, last_updated_date=None, _configuration=None):  # noqa: E501
        """TokenDataResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token_name = None
        self._token_type = None
        self._token_value = None
        self._user = None
        self._roles = None
        self._expiration_date = None
        self._created_date = None
        self._last_updated_date = None
        self.discriminator = None

        self.token_name = token_name
        self.token_type = token_type
        self.token_value = token_value
        if user is not None:
            self.user = user
        if roles is not None:
            self.roles = roles
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if created_date is not None:
            self.created_date = created_date
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date

    @property
    def token_name(self):
        """Gets the token_name of this TokenDataResponse.  # noqa: E501

        required field. HIDDEN.  # noqa: E501

        :return: The token_name of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this TokenDataResponse.

        required field. HIDDEN.  # noqa: E501

        :param token_name: The token_name of this TokenDataResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token_name is None:
            raise ValueError("Invalid value for `token_name`, must not be `None`")  # noqa: E501

        self._token_name = token_name

    @property
    def token_type(self):
        """Gets the token_type of this TokenDataResponse.  # noqa: E501

        required field. HIDDEN.  # noqa: E501

        :return: The token_type of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this TokenDataResponse.

        required field. HIDDEN.  # noqa: E501

        :param token_type: The token_type of this TokenDataResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self._token_type = token_type

    @property
    def token_value(self):
        """Gets the token_value of this TokenDataResponse.  # noqa: E501

        required field. HIDDEN.  # noqa: E501

        :return: The token_value of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_value

    @token_value.setter
    def token_value(self, token_value):
        """Sets the token_value of this TokenDataResponse.

        required field. HIDDEN.  # noqa: E501

        :param token_value: The token_value of this TokenDataResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token_value is None:
            raise ValueError("Invalid value for `token_value`, must not be `None`")  # noqa: E501

        self._token_value = token_value

    @property
    def user(self):
        """Gets the user of this TokenDataResponse.  # noqa: E501

        is not provided in API Token for Agent. HIDDEN.  # noqa: E501

        :return: The user of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TokenDataResponse.

        is not provided in API Token for Agent. HIDDEN.  # noqa: E501

        :param user: The user of this TokenDataResponse.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def roles(self):
        """Gets the roles of this TokenDataResponse.  # noqa: E501

        is not provided in API Token for Agent. HIDDEN.  # noqa: E501

        :return: The roles of this TokenDataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this TokenDataResponse.

        is not provided in API Token for Agent. HIDDEN.  # noqa: E501

        :param roles: The roles of this TokenDataResponse.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def expiration_date(self):
        """Gets the expiration_date of this TokenDataResponse.  # noqa: E501

        optional field. HIDDEN.  # noqa: E501

        :return: The expiration_date of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this TokenDataResponse.

        optional field. HIDDEN.  # noqa: E501

        :param expiration_date: The expiration_date of this TokenDataResponse.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def created_date(self):
        """Gets the created_date of this TokenDataResponse.  # noqa: E501

        transient field. HIDDEN.  # noqa: E501

        :return: The created_date of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TokenDataResponse.

        transient field. HIDDEN.  # noqa: E501

        :param created_date: The created_date of this TokenDataResponse.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this TokenDataResponse.  # noqa: E501

        transient field. HIDDEN.  # noqa: E501

        :return: The last_updated_date of this TokenDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this TokenDataResponse.

        transient field. HIDDEN.  # noqa: E501

        :param last_updated_date: The last_updated_date of this TokenDataResponse.  # noqa: E501
        :type: str
        """

        self._last_updated_date = last_updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenDataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenDataResponse):
            return True

        return self.to_dict() != other.to_dict()
